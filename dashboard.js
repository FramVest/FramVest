// ‚úÖ dashboard.js - Updated with login info check and localStorage fixes

function initDashboard() { const email = localStorage.getItem("loggedInUser"); if (!email) { alert("‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø! ‡¶Ü‡¶ó‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"); window.location.href = "login.html"; return; }

const userStr = localStorage.getItem(email); if (!userStr) { alert("‚ö†Ô∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!"); window.location.href = "login.html"; return; }

const user = JSON.parse(userStr); updateBalanceUI(user.balance || 0); renderActivePlans(user); startProfitTimer(user, email); }

function updateBalanceUI(amount) { document.getElementById("balance").innerText = "‡ß≥" + amount; }

function handleBuyPlan(price, dailyProfit, days) { const email = localStorage.getItem("loggedInUser"); const userStr = localStorage.getItem(email); if (!userStr) return;

const user = JSON.parse(userStr);

if (user.balance < price) { alert("‚ùå ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶®‡ßá‡¶á!"); return; }

if (!user.activePlans) user.activePlans = [];

user.balance -= price; const plan = { price, dailyProfit, remainingDays: days, lastCollected: Date.now(), nextCollectTime: Date.now() + 24 * 60 * 60 * 1000 };

user.activePlans.push(plan); localStorage.setItem(email, JSON.stringify(user));

updateBalanceUI(user.balance); renderActivePlans(user); alert("‚úÖ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡ßç‡¶∞‡ßü ‡¶π‡ßü‡ßá‡¶õ‡ßá!"); }

function renderActivePlans(user) { const section = document.getElementById("activePlansSection"); section.innerHTML = "";

if (!user.activePlans || user.activePlans.length === 0) { section.innerHTML = "<p>üö´ ‡¶è‡¶ñ‡¶®‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü‡¶ø‡¶≠ ‡¶®‡ßü‡•§</p>"; return; }

user.activePlans.forEach((plan, index) => { const now = Date.now(); const remainingTime = plan.nextCollectTime - now;

const hours = Math.floor(remainingTime / (1000 * 60 * 60));
const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
const seconds = Math.floor((remainingTime % (1000 * 60)) / 1000);

const timerText = remainingTime > 0
  ? `‚è≥ ‡¶≤‡¶æ‡¶≠ ‡¶Ü‡¶∏‡¶¨‡ßá: ${hours} ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ${minutes} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ${seconds} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá`
  : `‚è∞ ‡¶è‡¶ñ‡¶® ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá!`;

const isClaimEnabled = remainingTime <= 0 && plan.remainingDays > 0;
const buttonClass = isClaimEnabled ? "claim-btn active" : "claim-btn disabled";

const div = document.createElement("div");
div.className = "active-plan-card";
div.innerHTML = `
  <p>üì¶ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶® ${index + 1}: ‡ß≥${plan.price} | ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡¶æ‡¶≠: ‡ß≥${plan.dailyProfit}</p>
  <p>üóìÔ∏è ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶¶‡¶ø‡¶®: ${plan.remainingDays}</p>
  <p>${timerText}</p>
  <button class="${buttonClass}" ${isClaimEnabled ? "" : "disabled"} onclick="collectProfit(${index})">üí∞ ‡¶≤‡¶æ‡¶≠ ‡¶ï‡ßç‡¶≤‡ßá‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®</button>
`;
section.appendChild(div);

}); }

function collectProfit(index) { const email = localStorage.getItem("loggedInUser"); const userStr = localStorage.getItem(email); if (!userStr) return;

const user = JSON.parse(userStr); const plan = user.activePlans[index];

if (plan.remainingDays <= 0) { alert("‚ö†Ô∏è ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑ ‡¶π‡ßü‡ßá‡¶õ‡ßá!"); return; }

if (Date.now() < plan.nextCollectTime) { alert("‚ö†Ô∏è ‡¶è‡¶ñ‡¶®‡ßã ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶π‡ßü‡¶®‡¶ø‡•§"); return; }

plan.remainingDays--; plan.lastCollected = Date.now(); plan.nextCollectTime = Date.now() + 24 * 60 * 60 * 1000; user.balance += plan.dailyProfit;

localStorage.setItem(email, JSON.stringify(user)); updateBalanceUI(user.balance); renderActivePlans(user); alert(üéâ ‡¶≤‡¶æ‡¶≠ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡ß≥${plan.dailyProfit} ‡¶Ø‡ßã‡¶ó ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§); }

function addBalanceFromRedeem(value) { const email = localStorage.getItem("loggedInUser"); const userStr = localStorage.getItem(email); if (!userStr) return;

const user = JSON.parse(userStr); user.balance = (user.balance || 0) + value; localStorage.setItem(email, JSON.stringify(user)); updateBalanceUI(user.balance); renderActivePlans(user); alert("‚úÖ ‡¶∞‡¶ø‡¶°‡¶ø‡¶Æ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏‡ßá ‡ß≥" + value + " ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"); }

function startProfitTimer(user, email) { setInterval(() => { const latestUser = JSON.parse(localStorage.getItem(email)); renderActivePlans(latestUser); }, 1000); }

  
